" Author - Peter Horvath
" https://github.com/pisskidney/dotfiles

"======================================================================
"========================= vim-plug auto-load =========================
"======================================================================

" Install vim-plug if needed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Install missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
" Git integration
Plug 'tpope/vim-fugitive'
" File navigator
Plug 'preservim/nerdtree'
" Conquer of Completion. Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Cool fuzzy file explorer
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Highlight whitespace
Plug 'ntpeters/vim-better-whitespace'
" Surround words or content in quotes, html tags etc
Plug 'tpope/vim-surround'
" Comment out code dynamically
Plug 'tpope/vim-commentary'
" Set tab options on run-time
Plug 'tpope/vim-sleuth'
" Colorscheme
Plug 'gruvbox-community/gruvbox'
" Cool tabbar (line on bottom)
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Syntax highlighting, error checking, PEP8 checks etc
Plug 'nvie/vim-flake8'
call plug#end()

"======================================================================
"========================= GENERAL SETTINGS ===========================
"======================================================================

set completeopt=menuone,noinsert,noselect " Control the way auto-complete works (copied from Primagean)
set signcolumn=number                     " Show error arrows instead of the line numbers

set encoding=utf-8
set nowrap
set cmdheight=2                           " Give more space for displaying messages.
set hidden                                " TextEdit might fail if hidden is not set.
set updatetime=50                         " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
		                          " delays and poor user experience.
set shortmess+=c                          " Don't pass messages to |ins-completion-menu|.
set t_Co=256                              " Enable 256 colors
set termguicolors                         " Enable GUI colors for the terminal to get truecolor
set noswapfile                            " Disable swap files
set nobackup
set nowb
set autoread                              " Reload file changes outside of vim

set number                                " Display line numbers
set numberwidth=1                         " Using only 1 column (and 1 space) if possible
set background=dark                       " We are using dark background
set title                                 " Show title in console title bar

" Moving Around/Editing
set ruler                                 " Show the cursor position all the time
set nostartofline                         " Avoid moving cursor to BOL when jumping around
set virtualedit=block                     " Let cursor move past the last char in <C-v> mode
set scrolloff=3                           " Keep 3 context lines above and below the cursor
set backspace=2                           " Allow backspacing over autoindent, EOL, and BOL
set nowrap                                " Don't wrap text
set linebreak                             " Don't wrap textin the middle of a word
set autoindent                            " Always set autoindenting on
set smartindent                           " Use smart indent if there is no indent file
set tabstop=4                             " <Tab> inserts 4 spaces
set shiftwidth=4                          " Indent level is 4 spaces wide
set softtabstop=4                         " <BS> over an autoindent deletes both spaces
set smarttab                              " Handle tabs more intelligently
set expandtab                             " Use spaces, not tabs, for autoindent/tab key
set shiftround                            " Rounds indent to a multiple of shiftwidth
set matchpairs+=<:>                       " Show matching <> (html mainly) as well
set foldmethod=indent                     " Allow us to fold on indents
set foldlevel=99                          " Don't fold by default
set colorcolumn=100                       " Color column to mark the end 100 char limit

" Reading/Writing
set noautowrite                           " Never write a file unless I request it
set noautowriteall                        " NEVER
set noautoread                            " Don't automatically re-read changed files
set nomodeline                            " Disallow vim options to be embedded in files
set modelines=0                           " Same as above
set ffs=unix,dos,mac                      " Try recognizing dos, unix, and mac line endings

" Searching and Patterns
nnoremap / /\v
vnoremap / /\v
set ignorecase                            " Default to using case insensitive searches,
set smartcase                             " Unless uppercase letters are used in the regex.
set hlsearch                              " Highlight searches by default.
set showmatch                             " Briefly jump to a paren once it's balanced
set incsearch                             " Incrementally search while typing a /regex
set gdefault                              " Applies substitutions globally on lines

" Change the leader to be n
let mapleader="n"

" Hide matches on <leader>space
nnoremap <leader><space> :noh<CR>
nnoremap <tab> %
vnoremap <tab> %

" Quit window on <leader>q
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :qa<CR>

" Save on <leader>w or :W
nnoremap <leader>w :w<CR>
command! W :w

" Ctrl-jklm  changes to that split
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Reload .vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" <leader>p inserts pdb line after the current line
nnoremap <leader>p oimport pdb; pdb.set_trace()<Esc>

" Toggle paste mode
map <leader>P :set paste!<CR>

" Toggle numbers
map <leader>3 :set number!<CR>

"======================================================================
"======================== NERDTREE SETTINGS ===========================
"======================================================================

map <leader>n :NERDTreeToggle<CR>
let NERDTreeShowHidden=1      " Show hidden files
let g:NERDTreeWinSize=20      " NerdTree width

"======================================================================
"========================== COC SETTINGS ==============================
"======================================================================

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)
nnoremap <F4> :StripWhitespace<CR>

let s:LSP_CONFIG = {
			\  'flow': {
			\    'command': exepath('flow'),
			\    'args': ['lsp'],
			\    'filetypes': ['javascript', 'javascriptreact'],
			\    'initializationOptions': {},
			\    'requireRootPattern': 1,
			\    'settings': {},
			\    'rootPatterns': ['.flowconfig']
			\  }
			\}
let s:languageservers = {}
for [lsp, config] in items(s:LSP_CONFIG)
	  let s:not_empty_cmd = !empty(get(config, 'command'))
	    if s:not_empty_cmd | let s:languageservers[lsp] = config | endif
    endfor

    if !empty(s:languageservers)
	      call coc#config('languageserver', s:languageservers)
	        endif

"======================================================================
"========================== FZF SETTINGS ==============================
"======================================================================

" Open fzf
map <leader>f :Files<CR>

"======================================================================
"======================= AIRLINE SETTINGS =============================
"======================================================================

let g:airline_theme='violet'

"======================================================================
"====================== vim-flake8 SETTINGS ===========================
"======================================================================

" Run pyflakes whenever writing to a Python file
let g:flake8_cmd = '/Users/d695822/Library/Python/3.8/bin/flake8 --max-line-length 100'
let g:flake8_show_quickfix=1
let g:flake8_show_in_gutter=1
let g:flake8_show_in_file=1           " Show errors directly in file
let g:flake8_quickfix_height=5        " Height of quickfix window
autocmd BufWritePost *.py call flake8#Flake8()

"======================================================================
"============================== GRUVBOX ===============================
"======================================================================

let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox

"======================================================================
"============================ vim-fugitive ============================
"======================================================================

" Open main window
map <leader>g :Git<CR>
